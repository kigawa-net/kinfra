name: Auto Release

on:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write

jobs:
  auto-release:
    name: Build and Create Release
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true && startsWith(github.event.pull_request.head.ref, 'release/')

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract version from branch name
        id: extract_version
        run: |
          BRANCH_NAME="${{ github.event.pull_request.head.ref }}"
          VERSION="${BRANCH_NAME#release/}"

          # Validate version format (e.g., 1.0.0 or v1.0.0)
          if [[ ! "$VERSION" =~ ^v?[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
            echo "Error: Invalid version format: $VERSION"
            echo "Expected format: release/1.0.0 or release/v1.0.0"
            exit 1
          fi

          # Ensure version starts with 'v'
          if [[ ! "$VERSION" =~ ^v ]]; then
            VERSION="v$VERSION"
          fi

          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
          echo "VERSION_NUMBER=${VERSION#v}" >> $GITHUB_OUTPUT
          echo "Extracted version: $VERSION"

      - name: Check if release already exists
        id: check_release
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          if gh release view "$VERSION" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "Release $VERSION already exists"
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "Release $VERSION does not exist"
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up JDK 21
        if: steps.check_release.outputs.exists == 'false'
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'

      - name: Setup Gradle
        if: steps.check_release.outputs.exists == 'false'
        uses: gradle/actions/setup-gradle@v3

      - name: Make gradlew executable
        if: steps.check_release.outputs.exists == 'false'
        run: chmod +x gradlew

      - name: Run tests
        if: steps.check_release.outputs.exists == 'false'
        run: ./gradlew test
        env:
          VERSION: ${{ steps.extract_version.outputs.VERSION_NUMBER }}

      - name: Build CLI Shadow JAR
        if: steps.check_release.outputs.exists == 'false'
        run: ./gradlew :app-cli:shadowJar
        env:
          VERSION: ${{ steps.extract_version.outputs.VERSION_NUMBER }}

      - name: Build Web Shadow JAR
        if: steps.check_release.outputs.exists == 'false'
        run: ./gradlew :app-web:shadowJar
        env:
          VERSION: ${{ steps.extract_version.outputs.VERSION_NUMBER }}

      - name: Create Release (without tag)
        if: steps.check_release.outputs.exists == 'false'
        id: create_release
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"

          gh release create "$VERSION" \
            --title "Release $VERSION" \
            --generate-notes \
            --draft=false \
            --prerelease=false \
            app-cli/build/libs/kinfra-cli-*.jar \
            app-web/build/libs/kinfra-web-*.jar

          echo "Created release: $VERSION"
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Skip release creation
        if: steps.check_release.outputs.exists == 'true'
        run: |
          VERSION="${{ steps.extract_version.outputs.VERSION }}"
          echo "Skipping release creation - release $VERSION already exists"